// Generated by CoffeeScript 1.3.3
(function() {
  var models, projectJSON, _;

  models = require("../models");

  _ = require("underscore");

  exports.index = function(req, res) {
    return res.send("Welcome to Claw example backend man.");
  };

  /*
  Users
  */


  exports.users = function(req, res) {
    return models.db(function(err, conn) {
      return models.User.using(conn).all(function(err, users) {
        var user;
        return res.send({
          count: users.length,
          users: (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = users.length; _i < _len; _i++) {
              user = users[_i];
              _results.push({
                id: user.id,
                email: user.email
              });
            }
            return _results;
          })()
        });
      });
    });
  };

  exports.user = function(req, res) {
    return models.db(function(err, conn) {
      return models.User.using(conn).where({
        id: req.params.id
      }).first(function(err, user) {
        return res.send({
          id: user.id,
          email: user.email
        });
      });
    });
  };

  /*
  Projects routes
  */


  projectJSON = function(projects) {
    var ary, index, p, parseProject, project, ps;
    ary = _.isArray(projects);
    parseProject = function(project) {
      var base, data;
      data = project.data;
      base = {
        Â id: project.id
      };
      if (data) {
        return _.extend(base, JSON.parse(data));
      } else {
        return base;
      }
    };
    if (ary) {
      ps = [];
      for (index in projects) {
        project = projects[index];
        p = parseProject(project);
        if (p) {
          ps.push(p);
        }
      }
      return ps;
    } else {
      return _.extend({
        id: projects.id
      }, JSON.parse(projects.data));
    }
  };

  exports.projects = function(req, res) {
    return models.db(function(err, conn) {
      return models.Project.using(conn).all(function(err, projects) {
        return res.send({
          count: projects.length,
          projects: projectJSON(projects)
        });
      });
    });
  };

  exports.project = function(req, res) {
    return models.db(function(err, conn) {
      return models.Project.using(conn).where({
        id: req.params.id
      }).first(function(err, project) {
        return res.send(projectJSON(project));
      });
    });
  };

}).call(this);
